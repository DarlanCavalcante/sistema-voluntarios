function animateStats(){    const statNumbers = document.querySelectorAll('.stat-number');        const observer = new IntersectionObserver((entries)=>{        entries.forEach(entry =>{            if(entry.isIntersecting){                const element = entry.target;                const target = parseInt(element.getAttribute('data-target'));                animateNumber(element, target);                observer.unobserve(element);}});},{threshold: 0.5});        statNumbers.forEach(stat =>{        if(stat.hasAttribute('data-target')){            observer.observe(stat);}});}function animateNumber(element, target){    let current = 0;    const increment = target / 100;    const duration = 2000;     const stepTime = duration / 100;        const timer = setInterval(()=>{        current += increment;        element.textContent = Math.floor(current);                if(current >= target){            element.textContent = target;            clearInterval(timer);}}, stepTime);}function setupScrollAnimations(){    const animatedElements = document.querySelectorAll('.service-card, .project-card, .stat-card, .step');            const observer = new IntersectionObserver((entries)=>{        entries.forEach(entry =>{            if(entry.isIntersecting){                entry.target.classList.add('animate-in');                observer.unobserve(entry.target); }});},{        threshold: 0.1,        rootMargin: '50px 0px -50px 0px' });        animatedElements.forEach((element, index)=>{        element.style.opacity = '0';        element.style.transform = 'translateY(30px)';        element.style.transition = `opacity 0.6s ease ${index * 0.1}s, transform 0.6s ease ${index * 0.1}s`;        observer.observe(element);});}function setupParallaxEffect(){    const heroImages = document.querySelectorAll('.hero-image img, .about-image img');    let ticking = false;        function updateParallax(){        const scrolled = window.pageYOffset;        const rate = Math.max(-50, Math.min(50, scrolled * -0.1));                 heroImages.forEach(image =>{            const rect = image.getBoundingClientRect();            const container = image.closest('.hero-image, .about-image');                                    if(rect.top < window.innerHeight && rect.bottom > 0 && container){                image.style.transform = `translate3d(0, ${rate}px, 0)`;                image.style.position = 'relative';                image.style.zIndex = '1';}});        ticking = false;}        window.addEventListener('scroll',()=>{        if(!ticking){            requestAnimationFrame(updateParallax);            ticking = true;}},{passive: true});}function setupCardHoverEffects(){    const cards = document.querySelectorAll('.service-card, .project-card, .contact-item');        cards.forEach(card =>{        card.addEventListener('mouseenter',()=>{            card.style.transform = 'translateY(-5px)';});                card.addEventListener('mouseleave',()=>{            card.style.transform = 'translateY(0)';});});}window.AnimationsModule ={    animateStats,    animateNumber,    setupScrollAnimations,    setupParallaxEffect,    setupCardHoverEffects};